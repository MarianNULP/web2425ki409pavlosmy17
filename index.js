require('dotenv').config();                 // 1Ô∏è‚É£  .env ‚Äì –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –î–£–ñ–ï —Ä–∞–Ω–æ!

const express    = require('express');
const mongoose   = require('mongoose');
const session    = require('express-session');
const passport   = require('passport');
const jwt        = require('jsonwebtoken');

const { encrypt, hash, verifyHash } = require('./utils/crypto');
const User       = require('./models/User');

// ‚îÄ‚îÄ‚îÄ PASSPORT STRATEGIES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
require('./auth/google');                   // –ø—Ä–æ—Å—Ç–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª ‚Äì –≤—ñ–Ω —Å–∞–º —Ä–µ—î—Å—Ç—Ä—É—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

const app  = express();
const PORT = process.env.PORT || 3000;

// ‚îÄ‚îÄ‚îÄ MongoDB ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
mongoose.connect(process.env.MONGO_URI)
  .then(()=>console.log('üü¢ MongoDB connected'))
  .catch(e => console.error('üî¥ Mongo error:', e));

// ‚îÄ‚îÄ‚îÄ –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.use(session({
  secret            : process.env.JWT_SECRET,
  resave            : false,
  saveUninitialized : false
}));
app.use(passport.initialize());
app.use(passport.session());

// ‚îÄ‚îÄ‚îÄ –ü–ê–†–°–ï–†–ò ‚îÇ –°–¢–ê–¢–ò–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));

// ‚îÄ‚îÄ‚îÄ BASIC ROUTES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.get('/get-page', (req, res) => {
  const data = req.query.data || '‚Äî';
  res.send(
    `<h1>GET‚Äë—Å—Ç–æ—Ä—ñ–Ω–∫–∞</h1>
     <p>–í–∏ –≤–≤–µ–ª–∏: <strong>${data}</strong></p>
     <p>–ß–∞—Å: ${new Date().toLocaleString()}</p>`
  );
});

app.post('/post-page', (req, res) => {
  const data = req.body.data || '‚Äî';
  res.send(
    `<h1>POST‚Äë—Å—Ç–æ—Ä—ñ–Ω–∫–∞</h1>
     <p>–í–∏ –≤–≤–µ–ª–∏: <strong>${data}</strong></p>
     <p>–ß–∞—Å: ${new Date().toLocaleString()}</p>`
  );
});

// AJAX‚ÄëAPI –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
app.get('/api/time', (req, res) =>
  res.json({ ts: Date.now(), youSent: req.query })
);

app.post('/api/echo', (req, res) =>
  res.json({ youSent: req.body, ts: Date.now() })
);

// ‚îÄ‚îÄ‚îÄ AUTH (–ø–∞—Ä–æ–ª—å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.post('/register', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).json({ error:'missing fields' });

    await User.create({
      email,
      passwordPlain : password,
      passwordHash  : await hash(password),
      passwordEnc   : encrypt(password)
    });
    res.json({ ok:true });
  } catch (e) {
    if (e.code === 11000) return res.status(409).json({ error:'user exists' });
    console.error(e);
    res.status(500).json({ error:'server' });
  }
});

app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(404).json({ error:'not found' });

  const passOk = password === user.passwordPlain ||
                 await verifyHash(password, user.passwordHash);

  if (!passOk) return res.status(401).json({ error:'bad creds' });

  const token = jwt.sign({ id:user._id }, process.env.JWT_SECRET, { expiresIn:'1h' });
  req.session.userId = user._id;
  res.json({ token });
});

const authJWT = (req,res,next)=>{
  const hdr = req.headers.authorization || '';
  const token = hdr.startsWith('Bearer ') ? hdr.slice(7) : null;
  try {
    req.userId = jwt.verify(token, process.env.JWT_SECRET).id;
    next();
  } catch { res.status(401).end(); }
};

app.get('/dashboard', authJWT, (req, res)=>
  res.send(`–í—ñ—Ç–∞—é! –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ ID ${req.userId}`)
);

// ‚îÄ‚îÄ‚îÄ AUTH (Google) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.get('/auth/google',
  passport.authenticate('google', { scope:['profile','email'] })
);

app.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect:'/login' }),
  (_,res)=> res.redirect('/dashboard')
);

// ‚îÄ‚îÄ‚îÄ –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.listen(PORT, ()=> console.log(`üöÄ http://localhost:${PORT}`));
